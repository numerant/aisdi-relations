2) Chcę mieć możliwość importu danych z podanego katalogu zawierającego pliki .eml (ewentualnie z przeszukiwaniem podfolderów).

To będzie w klasie input output. W zależności od opcji wybranych w interfejsie i przez niego przekazanych (typu przeszukiwanie podfolderów, sprawdzanie plików niezaleznie od rozszerzenia itp - BTW - słowo-klucz MimeType) wywołujemy Database->AddDirectory, Database->AddFile. Trzeba zorientować się, jak rozwiązać w CPP przeszukiwanie katalogów - jakaś biblioteka?


3) Chcę, by program sprawdzał poprawność wczytywanych listów, aby zapobiec katastrofie.

Z interfejsu przekazana zostaje ścieżka do katalogu / pojedynczego listu do klasy sprawdzającej poprawność (jw., może wcisnąć to do klasy baza? Database->AddDirectory(...), Database ->AddFile(...) ). Jeśli e-mail ma właściwą strukturę (wg specyfikacji formatu), możemy zrobić "new Mail" i doczepić go do bazy. Jeśli nie, zwracamy błąd (pusty obiet klasy dziedziczącej po ImportError, np.
	DirectoryIsEmpty
	TargetDoesNotExist
	AccessDenied


4) Po zakończeniu importu danych chcę otrzymać raport z tej operacji (ilość znalezionych plików, poprawnie wczytanych, zignorowanych).	

Gdy nie pojawi się któryś z powyższych błędów całkowicie przekreślających możliwość wczytania czegokolwiek, można zwracać obiekt zawierający pola typu int zawierające liczbę poprawnie i niepoprawnie wczytanych listów oraz ewentualnie ścieżki do nich.


5) Użytkownik ma mieć możliwość dodania pojedynczych maili lub ich zbioru do wcześniej stworzonej bazy.

Nad tym nie ma się co za mocno rozwodzić, w większości sprowadza się to do przypadku nr 2, jedynie nie trzeba już tworzyć obiektu Database i fakt ten należy przy pomocy jakiegoś boola wykrywać.


11) Jako niezbyt pojętny użytkownik komputera chcę otrzymywać komunikaty o błędach jedynie w zrozumiałej dla CZŁOWIEKA formie.

Nie wiem czy to dobra praktyka, ale możemy ustalić, że wszystkie błędy w programie zwracamy jak wyżej - poprzez obiekt klasy dziedziczącej po Error. Do każdej takiej podklasy przypiszmy komunikat, który program wypisywał będzie przy jego wystąpieniu (może jako stałą wewnątrz klasy?)
